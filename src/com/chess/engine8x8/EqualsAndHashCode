equals():
    Used in most collections to determine if a collection contains
    a given element. For instance:

        List list = new ArrayList();
        list.add("123");
        boolean contains123 = list.contains("123");

    The ArrayList iterates all its elements and executes
    "123".equals(element) to determine if the element is equal to the
    parameter object "123". It is the String.equals() implementation
    that determines if two strings are equal.

    The equals()method is also used when removing elements. For
    instance:

        List list = new ArrayList();
        list.add("123");
        boolean removed = list.remove("123");

    The ArrayList again iterates all its elements and executes
    "123".equals(element) to determine if the element is equal to
    the parameter object "123". The first element it finds that
    is equal to the given parameter "123" is removed.

    A proper implementation of .equals() is essential for your
    own classes to work well with the Java Collection classes.

    For instance, let's say you are loading and processing Employee
    objects stored in a database. Here is a simple example of such
    and Employee class:

        public class Employee {
            protected long employeeId;
            protected String firstName;
            protected String lastName;
        }

    You could decide that two Employee objects are equal to each
    other if just their employeeId's are equal. Or, you could
    decide that all fields must be equal - both employeeId,
    firstName and lastName. Here are two example implementations
    of equals() matching these criteria:

        CASE 1:
        public class Employee {
          ...
          public boolean equals(Object o){
            if(o == null)                return false;
            if(!(o instanceof) Employee) return false;

            Employee other = (Employee) o;
            return this.employeeId == other.employeeId;
          }
        }

        CASE 2:
        public class Employee {
          ...
          public boolean equals(Object o){
            if(o == null)                return false;
            if(!(o instanceof) Employee) return false;

            Employee other = (Employee) o;
            if(this.employeeId != other.employeeId)      return false;
            if(! this.firstName.equals(other.firstName)) return false;
            if(! this.lastName.equals(other.lastName))   return false;

            return true;
          }
        }

    Determining which of these two implementations is "proper" depends
    on what you need to do. Sometimes you need to look up an Employee
    object from a cache. In that case perhaps all you need is for the
    employeeId to be equal. In other cases you may need more than
    that - for instance, to determine if a copy of an Employee object
    has changed from the original.

hashCode():
    Used when you insert objects into a HashTable, HashMap or HashSet.

    When inserting an object into a hash table you use a key. The
    hash code of this key is calculated, and used to determine where
    to store the object internally. When you need to lookup an object
    in a hash table you also use a key. The hash code of this key is
    calculated and used to determine where to search for the object.

    The hash code only points to a certain "area" internally. Since
    different key objects could potentially have the same hash code,
    the hash code itself is no guarantee that the right key is found.
    The has table then iterates this area (all keys with the same hash
    code) and uses the key's equals() method to find the right key.
    Once the right key is found, the object stored for that key is
    returned.

    Two rules that are good to know about implementing the hashCode()
    method in your own classes, if the hash tables in the Java
    Collections API are to work correctly:
        1. If object 1 and object 2 are equal according to their
        equals() method, they must also have the same hash code.
            If objects are equal, then same hash codes too.

        2. If object 1 and object 2 have the same hash code, they
        do not have to be equal too.
            Same hash codes do not guarantee objects being equal.

    Here are two example implementations of the hashCode() method
    matching the equals() methods shown earlier:

        CASE 1:
        public class Employee {
          protected long   employeeId;
          protected String firstName;
          protected String lastName;

          public int hashCode(){
            return (int) employeeId;
          }
        }

        CASE 2:
        public class Employee {
            protected long   employeeId;
            protected String firstName;
            protected String lastName;

          public int hashCode(){
            return (int) employeeId *
                        firstName.hashCode() *
                        lastName.hashCode();
          }
        }

    Notice that if two Employee objects are equal, they will also
    have the same hash code. But two Employee objects can not be
    equal, and still have the same hash code.

    In both examples the hash code is the employeeId is rounded
    down to an int. That means that many employee id's could result
    in the same hash code, but these Employee objects would still
    not be equal, since they don't have the same employee id.